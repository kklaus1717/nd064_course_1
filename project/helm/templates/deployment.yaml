

## Set the API endpoint used to create the Deployment resource.
apiVersion: apps/v1
## Define the type of the resource.
kind: Deployment
## Set the parameters that make the object identifiable, such as its name, namespace, and labels.
metadata:
  annotations:
  labels:
    app: techtrends
  name: techtrends
  namespace: {{ .Values.namespace.name }}
## Define the desired configuration for the Deployment resource.
spec:
  ## Set the number of replicas.
  replicas: {{ .Values.replicaCount }}
  ## Identify the pods managed by this Deployment using the following selectors.
  ## In this case, all pods with the label `techtrends`.
  selector:
    matchLabels:
      app: techtrends
  ## Set the configuration for the pods.
  template:
    ## Define the identifiable metadata for the pods.
    ## For example, all pods should have the label `techtrends`
    metadata:
      labels:
        app: techtrends
    ## Define the desired state of the pod configuration.
    spec:
      containers:
        ## Set the image to be executed inside the container and image pull policy
      - image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        name: techtrends
        ## Expose the port the container is listening on.
        ports:
        - containerPort: {{ .Values.containerPort }}
          protocol: TCP
        ## Define the rules for the liveness probes.
        livenessProbe:
           httpGet:
             path: {{ .Values.livenessProbe.path }}
             port: 3111
        ## Define the rules for the readiness probes.
        readinessProbe:
           httpGet:
             path: {{ .Values.readinessProbe.path }}
             port: 3111
        ## Set the resource requests and limits for an application.
        resources:
        ## The resource requests guarantees that the desired amount 
        ## CPU and memory is allocated for a pod. In this example, 
        ## the pod will be allocated with 64 Mebibytes and 250 miliCPUs.
          requests:
            memory: {{ .Values.requests.menory }}
            cpu: {{ .Values.requests.cpu }}
        ## The resource limits ensure that the application is not consuming 
        ## more than the specified CPU and memory values. In this example, 
        ## the pod will not surpass 128 Mebibytes and 500 miliCPUs.
          limits:
            memory: {{ .Values.limits.memory }}
            cpu: {{ .Values.limits.cpu }}

